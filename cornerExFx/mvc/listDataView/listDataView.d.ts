import { ListView } from "../../controls/listView/listView";
import { ListDataBox } from "../listDataBox/listDataBox";
import { MVVMListInfo } from "../../mvvm/mvvmBase";
export declare class ListDataView extends ListDataBox {
    protected _control: any;
    protected listDataViewToolbar: HTMLDivElement;
    private listDataViewMain;
    protected listDataName: string;
    private exportCSVA;
    protected listDataViewExport: HTMLDivElement;
    protected listDataViewRefresh: HTMLDivElement;
    private static isCSSLoaded;
    private listDataViewPageBarPageCount;
    private listDataViewPageBarNext;
    private listDataViewPageBarPrevious;
    private listDataViewPageBarLast;
    private listDataViewPageBarFirst;
    private listDataViewPageBarGo;
    private listDataViewPageBarPageInput;
    private listDataViewPageBarInfo;
    private listDataViewPageBar;
    private chartsPanel;
    private _handle;
    protected listDataViewSearch: HTMLDivElement;
    protected listDataViewChart: HTMLDivElement;
    private listDataViewSearchBar;
    private date;
    private isHandleMove;
    private chartsHeight;
    readonly toolBarDiv: HTMLDivElement;
    readonly control: ListView;
    protected isDark: boolean;
    private _mainTop;
    mainTop: number;
    private _xmlData;
    constructor(name: string, port?: number, isDark?: boolean, multiLine?: boolean);
    showChart(): void;
    private listSelectFieldSetValue;
    private isChartInit;
    private showChartExec;
    hideChart(): void;
    private setTop;
    private showSearchBar;
    private hideSearchBar;
    private delWhereBar;
    private addWhereBar;
    private setSearchBar;
    private isSearchShowed;
    private isChartShowed;
    private goPage;
    protected _toolBarVisible: boolean;
    toolBarVisible: boolean;
    protected _pageBarVisible: boolean;
    pageBarVisible: boolean;
    protected loadHtml(): void;
    protected loadToolbar(): void;
    loadData(page?: number, where?: string): void;
    private fields;
    protected setControl(info: MVVMListInfo): void;
    exportCSVFileName: string;
    private uri;
    exportCSV(): void;
    private getCSV;
    protected setRowCount(newValue: number): void;
    protected _pageCount: number;
    protected setPageCount(newValue: number): void;
    readonly pageCount: number;
    protected _page: number;
    protected setPage(newValue: number): void;
    readonly page: number;
    private whereBarAC;
    private setPageOrPageCount;
}
